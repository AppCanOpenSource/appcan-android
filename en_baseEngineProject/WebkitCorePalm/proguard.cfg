-optimizationpasses 5
-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-dontpreverify
-dontshrink
-verbose
-optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
-ignorewarning

-keep public class * extends android.app.Activity
-keep public class * extends android.app.Application
-keep public class * extends android.app.Service
-keep public class * extends android.content.BroadcastReceiver
-keep public class * extends android.content.ContentProvider
-keep public class com.android.vending.licensing.ILicensingService

-keepclasseswithmembernames class * {
    native <methods>;
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet);
}

-keepclasseswithmembernames class * {
    public <init>(android.content.Context, android.util.AttributeSet, int);
}

-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keep class * implements android.os.Parcelable {
  public static final android.os.Parcelable$Creator *;
}
-keep class org.zywx.wbpalmstar.plugin.**{
	*;
}
-keep class org.zywx.wbpalmstar.widgetone.uex.**{
	*;
}
-keep class com.baidu.mapapi.** {*;} 
-keep class com.baidu.mobads.** {*;} 
-keepclassmembers public class * {
	
	public void open(java.lang.String);
	public void play();
	public void pause();
	public void stop();
	public void volumeUp();
	public void volumeDown();
	public void openPlayer(java.lang.String[]);
	public void record();
	public void openSoundPool(java.lang.String);
	public void playFromSoundPool(java.lang.String);
	public void stopFromSoundPool(java.lang.String);
	public boolean clean();


	public void open();
	public void addItem(java.lang.String, java.lang.String, java.lang.String);
	public void deleteItem(java.lang.String);
	public void searchItem(java.lang.String);
	public void modifyItem(java.lang.String, java.lang.String, java.lang.String);
	
	public void call(java.lang.String); 
	public void dial(java.lang.String);
	
	public void vibrate(java.lang.String); 
	public void cancelVibrate(); 
	public void getInfo(java.lang.String); 
	public void open(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
	
	public void open(java.lang.String, java.lang.String);
	public void send(java.lang.String, java.lang.String);
	public void open(java.lang.String); 
	public void record();
	
	
	public void createDownloader(java.lang.String);
	public void download(java.lang.String, java.lang.String, java.lang.String,java.lang.String);
	public void closeDownloader(java.lang.String);
	public void createFile(java.lang.String, java.lang.String);
	public void createDir(java.lang.String, java.lang.String);
	public void openFile(java.lang.String, java.lang.String, java.lang.String);
	public void deleteFileByPath(java.lang.String);
	public void deleteFileByID(java.lang.String);
	public void isFileExistByPath(java.lang.String);
	public void isFileExistByID(java.lang.String);
	public void getFileTypeByPath(java.lang.String);
	public void getFileTypeByID(java.lang.String);
	public void explorer(java.lang.String);
	public void seekFile(java.lang.String, java.lang.String);
	public void seekBeginOfFile(java.lang.String);
	public void seekEndOfFile(java.lang.String);
	public void writeFile(java.lang.String, java.lang.String, java.lang.String);
	public void readFile(java.lang.String, java.lang.String);
	public void getFileSize(java.lang.String);
	public void getFilePath(java.lang.String);
	public void closeFile(java.lang.String);
	public void getReaderOffset(java.lang.String);
	public void readPercent(java.lang.String, java.lang.String, java.lang.String);
	public void readNext(java.lang.String, java.lang.String);
	public void readPre(java.lang.String, java.lang.String);
	public void login(java.lang.String, java.lang.String, java.lang.String,java.lang.String);
	public void sendData(java.lang.String, java.lang.String);
	public void sendFile(java.lang.String, java.lang.String);
	public void receiveFile(java.lang.String);
	public void refuseAcceptFile();
	public void logout();
	public void sendLog(java.lang.String);
	public void createUDPSocket(java.lang.String, java.lang.String);
	public void createTCPSocket(java.lang.String);
	public void closeSocket(java.lang.String);
	public void setTimeOut(java.lang.String, java.lang.String);
	public void setInetAddressAndPort(java.lang.String, java.lang.String,java.lang.String);
	public void sendData(java.lang.String, java.lang.String);
	public void createUploader(java.lang.String, java.lang.String);
	public void closeUploader(java.lang.String);
	public void uploadFile(java.lang.String, java.lang.String,java.lang.String);
	public void zip(java.lang.String, java.lang.String);
	public void unzip(java.lang.String, java.lang.String);
	
	
	public void open();
	
	public void openLocation();
	public void getAddress(java.lang.String,java.lang.String);
	public void pay(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
	
	public void open(java.lang.String, java.lang.String);
	public void close(java.lang.String);
	
	public void startWidget(java.lang.String, java.lang.String, java.lang.String, java.lang.String);
	public void finishWidget(java.lang.String);
	public void removeWidget(java.lang.String);
	public void loadApp(java.lang.String,java.lang.String,java.lang.String);
	public void setMySpaceInfo(java.lang.String, java.lang.String, java.lang.String);
	public void getOpenerInfo() ;
	public void checkUpdate();
	
	
	public void getId();
	public void getWidgetNumber();
	public void getWidgetInfo(java.lang.String) ;
	public void getCurrentWidgetInfo();
	public void getVersion();
	public void getPlatform();
	public void exit();
	
	public void open(java.lang.String, java.lang.String, java.lang.String);
	
	public void open(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
	public void openSlibing(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String);
	public void showSlibing(java.lang.String);
	public void close(java.lang.String);
	public void closeSlibing(java.lang.String);
	public void evaluateScript(java.lang.String, java.lang.String, java.lang.String);
	public void loadObfuscationData(java.lang.String);
	public void back();
	public void forward();
	public void windowBack(java.lang.String);
	public void windowForward(java.lang.String);
	public void alert(java.lang.String, java.lang.String, java.lang.String);
	public void confirm(java.lang.String, java.lang.String, java.lang.String[]);	
	public void prompt(java.lang.String, java.lang.String, java.lang.String, java.lang.String[]); 
	public void actionSheet(java.lang.String, java.lang.String[]); 
	public void toast(java.lang.String, java.lang.String,java.lang.String, java.lang.String);
	public void closeToast();
	
	public void setReportKey(java.lang.String,java.lang.String);
	
	public void pick(); 
	
	public void openDatePicker(java.lang.String,java.lang.String,java.lang.String);
	public void openTimePicker(java.lang.String,java.lang.String); 
	
	public void open(java.lang.String[]) ;
	
	public void actionSheet(java.lang.String, java.lang.String, java.lang.String[]);
    public void setLoadingImagePath(java.lang.String[]);
	
}


